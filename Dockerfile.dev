# syntax=docker/dockerfile:1

###############################
# Base stage with common dependencies
FROM node:18-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat

###############################
# Install dependencies as root
FROM base AS deps
COPY package.json package-lock.json ./
RUN npm ci

###############################
# Build the application as root
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Create directories with proper permissions
RUN mkdir -p /app/src/generated /app/.next \
&& chmod -R 755 /app/src/generated /app/.next

# Copy .env.development to .env for the build
COPY .env.development .env

# Create a non-root user called nextjs in nodejs group i.e. not 1000
RUN addgroup --system --gid 1001 nodejs \
&& adduser --system --uid 1001 nextjs

RUN npx prisma generate
RUN npm run build

###############################
# Run as non-root user
FROM base AS runner
ENV NODE_ENV=production
WORKDIR /app

# Create the same non-root user in the runner stage
RUN addgroup --system --gid 1001 nodejs \
  && adduser --system --uid 1001 nextjs

# Copy the built app and required files
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/src/generated ./src/generated
COPY --from=builder /app/prisma ./prisma

# Set permissions for all in app to the nextjs user in nodejs group
RUN chown -R nextjs:nodejs /app

# Switch to the non-root user
USER nextjs

# Expose the application port and define entrypoint
EXPOSE 3000
CMD ["npm", "start"]