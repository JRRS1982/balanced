name: Database Migrations

# This workflow is for running database migrations only
# It is separate from code deployments to allow independent control
on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "yes" to confirm running database migrations'
        required: true
        default: 'no'

jobs:
  validate:
    name: Validate Migration Request
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirmation == 'yes' }}
    steps:
      - name: Confirm intent
        run: echo "Migration confirmed by user. Proceeding..."

  run_migrations:
    name: Run Database Migrations
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # We'll use the same Docker image that contains our Prisma setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build migrations-only Docker image
      - name: Build migrations image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/balanced:migrations-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/balanced:latest
          cache-to: type=inline

      # Add SSH keys for secure connect
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # known_hosts: i.e. SSH fingerprint of RaspberryPi, which Github Action will use to verify the connection and prevent man in the middle attacks
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: replace

      # Create migration script locally
      - name: Create migration script
        run: |
          # Set variables for script
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          IMAGE_TAG="${{ github.sha }}"

          # Create migration script to run on the Pi
          cat > /tmp/run_migrations.sh << 'EOF'
          #!/bin/bash
          set -e

          # Variables will be replaced by sed
          DOCKER_IMAGE="__DOCKERHUB_USERNAME__/balanced:migrations-__IMAGE_TAG__"

          echo "Pulling migration image..."
          docker pull $DOCKER_IMAGE

          echo "Running migrations..."
          docker run --rm \
            --name balanced-migrations \
            -e NODE_ENV=production \
            -e DATABASE_URL="${DATABASE_URL}" \
            $DOCKER_IMAGE \
            npx prisma migrate deploy

          echo "Migrations completed successfully"

          # Clean up
          docker rmi $DOCKER_IMAGE
          EOF

          # Prepare the script with proper values (avoiding direct secret usage in echo)
          sed -i "s|__DOCKERHUB_USERNAME__|$DOCKERHUB_USERNAME|g" /tmp/run_migrations.sh
          sed -i "s|__IMAGE_TAG__|$IMAGE_TAG|g" /tmp/run_migrations.sh

      # Transfer migration script to Raspberry Pi
      - name: Transfer migration script
        run: |
          # Transfer the script (avoiding direct secret usage in SSH/SCP commands)
          scp -o StrictHostKeyChecking=no /tmp/run_migrations.sh ${{ secrets.PI_USERNAME }}@${{ secrets.PI_HOST }}:/tmp/run_migrations.sh

      # Execute migrations on Raspberry Pi
      - name: Execute migrations on Raspberry Pi
        run: |
          # Execute the migration with DATABASE_URL passed securely
          ssh -o StrictHostKeyChecking=no ${{ secrets.PI_USERNAME }}@${{ secrets.PI_HOST }} \
            "sed -i 's|__DATABASE_URL__|'\"${{ secrets.DATABASE_URL }}\"'|g' /tmp/run_migrations.sh && \
             chmod +x /tmp/run_migrations.sh && \
             bash /tmp/run_migrations.sh && \
             rm -f /tmp/run_migrations.sh"

      # Clean up local files
      - name: Clean up local files
        run: |
          # Clean up local temp file
          rm -f /tmp/run_migrations.sh
